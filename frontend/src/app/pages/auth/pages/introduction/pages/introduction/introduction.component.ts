import { mergeMap, Observable, Subscription } from 'rxjs';
import { Store } from '@ngxs/store';
import { ToastrService } from 'ngx-toastr';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ProfileState } from '@app/store/states/profile.state';
import { UpdateProfile } from '@app/store/actions/profile.action';
import {
  Component,
  inject,
  OnDestroy,
  OnInit,
  output,
  TemplateRef,
  ViewChild,
} from '@angular/core';
import { TranslatePipe, TranslateService } from '@ngx-translate/core';
import { AuthHeaderComponent } from '@app/core/layouts/auth';
import {
  AutoGenerateIntroduction,
  PatchProfileDetails,
  RegistrationState,
  ViewProfile,
} from '@app/store';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { CommonService } from '@app/core/services';
import { CustomToastComponent } from '../../../../../../shared/components/custom-toast/custom-toast.component';
import { Router } from '@angular/router';

@Component({
  selector: 'app-introduction',
  standalone: true,
  imports: [FormsModule, CommonModule, TranslatePipe, AuthHeaderComponent, CustomToastComponent],
  templateUrl: './introduction.component.html',
  styleUrl: './introduction.component.scss',
})
export class IntroductionComponent implements OnInit, OnDestroy {
  private _store = inject(Store);
  public introduction: string = '';
  public language: string = 'chinese';
  public subscriptions: Subscription[] = [];
  public closeDialog = output<Event>({ alias: 'close-dialog' });
  public viewProfile$ = this._store.select(ProfileState.viewProfile);
  public updateProfileSuccessMessage$ = this._store.select(ProfileState.updateProfileSuccessMsg);
  private profileDetails$: Observable<IViewProfile | null> = this._store.select(
    RegistrationState.profileDetails
  );
  public profileData: IViewProfile | null = null;
  private aiIntroduction$: Observable<string | null> = this._store.select(
    RegistrationState.autoGenerateIntroduction
  );
  readonly dialog = inject(MatDialog);
  public warningDialogRef!: MatDialogRef<string, any>;
  @ViewChild('warningDialog') warningDialog!: TemplateRef<string>;
  activeButton: number | null = null;

  constructor(
    private _toastr: ToastrService,
    private _translate: TranslateService,
    private _commonService: CommonService,
    private _router: Router
  ) {}

  ngOnInit(): void {
    this.language = this._translate.currentLang === 'zh' ? 'chinese' : 'english';
    this.subscriptions.push(
      this._translate.onLangChange.subscribe(event => {
        this.language = event.lang === 'zh' ? 'chinese' : 'english';
      })
    );
    this.getProfileDataFromStore();
  }
  getProfileDataFromStore() {
    this.subscriptions.push(
      this.profileDetails$.subscribe({
        next: details => {
          if (details) {
            this.profileData = details;
          }
        },
      })
    );
  }

  setActiveButton(buttonNumber: number): void {
    this.activeButton = buttonNumber;
  }

  onGenerate(type: string, isUpdate = false, event?: Event) {
    this._commonService.setMessage(null);
    if (type === 'aiText' && this.introduction === '') {
      this._commonService.setMessage({
        type: 'error',
        message: 'PROFILE_PAGE.INTRODUCTION_REQUIRED',
      });
      return;
    }
    const payload = {
      user_id: this.profileData && this.profileData.unique_id ? this.profileData.unique_id : '',
      description: type === 'aiText' ? this.introduction : '',
      request_type: type === 'aiText' ? 'rephrase' : 'create',
    };
    this.subscriptions.push(
      this._store.dispatch(new AutoGenerateIntroduction(payload)).subscribe({
        next: apiResult => {
          this.getAutoGeneratedData();
          if (isUpdate) {
            this.onSaveIntroduction(event);
          }
        },
        error: apiError => {
          this._toastr.error(apiError.error.response.status.msg, 'Error', {
            closeButton: true,
            timeOut: 3000,
          });
        },
      })
    );
  }

  getAutoGeneratedData() {
    this.subscriptions.push(
      this.aiIntroduction$.subscribe(data => {
        if (data) {
          this.introduction = data;
        }
      })
    );
  }

  onSaveIntroduction(event?: Event) {
    if (this.introduction === '') {
      this._commonService.setMessage(null);
      this.openWarningDialog(event);
    } else {
      const payload = {
        introduction: this.introduction,
      };
      this.subscriptions.push(
        this._store
          .dispatch(new UpdateProfile(payload))
          .pipe(
            mergeMap(() => {
              return this._store.dispatch(new ViewProfile());
            })
          )
          .subscribe({
            next: apiResult => {
              if (this.profileData) {
                this.profileData = {
                  ...this.profileData,
                  user_status: 3,
                  registration_status: 6,
                };
              }
              this._store.dispatch(new PatchProfileDetails(this.profileData));
              this._router.navigate(['/reg-success']);
              this.closeWarningDialog();
            },
            error: apiError => {
              this.closeWarningDialog();

              this._toastr.error(apiError.error.response.status.msg, 'Error', {
                closeButton: true,
                timeOut: 3000,
              });
            },
          })
      );
    }
  }
  public openWarningDialog(event?: Event) {
    event?.stopPropagation();
    this.warningDialogRef = this.dialog.open(this.warningDialog, {
      panelClass: 'warning-dialog',
      backdropClass: 'customDialogBackdrop',
      hasBackdrop: true,
      disableClose: true,
    });
  }

  public closeWarningDialog() {
    if (this.warningDialogRef) {
      this.warningDialogRef.close();
    }
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(subscription => subscription.unsubscribe());
  }
}
